#!/usr/bin/python
import subprocess, logging
import sys, os, time

ROOT=os.path.dirname(os.path.abspath(__file__))

bots=2
image="dockemu"
server="192.168.8.20"
duration=10
delay=0

# number of bots
print "#######  WELCOME TO DOCKEMU V.1.0  ####### "
try:
	bots = input('How many bots do you need? [defaults=%s]: '%bots)
	print
except KeyboardInterrupt:
	sys.exit(0)
except:
	logging.warning(" bots not provided, using defaults (%s)"%bots)
	print

#server to attack
try:
	aux = raw_input('Enter the IP of the server to attack? [defaults=%s]: '%server)
	if aux != "":
		server=aux
	print
except KeyboardInterrupt:
	sys.exit(0)
except:
	logging.warning( "server not provided, using defaults (%s)"%server)
	print 

#duration of the experiment
try:
	duration = input('Enter the duration of the attack [defaults=%s s]: '%duration)
	print
except KeyboardInterrupt:
	sys.exit(0)
except:
	logging.warning( "duration not provided, using defaults (%s)"%duration)
	print 


#delay between docker bots start
try:
	delay = input('Enter the delay between the start of each docker bot [defaults=%s s]: '%delay)
	print
except KeyboardInterrupt:
	sys.exit(0)
except:
	logging.warning( "delay not provided, using defaults (%s)"%delay)
	print


print "STARTING DOCKEMU BOT-NET ...."
names=[]
for i in range(bots):
	cmd="docker run -d --name dockemu-%s -e 'server=%s' dockemu &>/dev/null"%(i,server)
	print cmd
	try:
		print
		p = subprocess.Popen(cmd , shell=True)
	except:
		logging.error( "CANNOT START dockemu-%s"%i)
	time.sleep(delay)



if duration != 0:
	print
	print "Waiting %ss to stop the attack (all docker botnet)"%duration
	time.sleep(duration)
	try:
		for i in range(bots):
			cmd="docker kill dockemu-%s && docker stop dockemu-%s  && docker rm dockemu-%s "%(i,i,i)
			print cmd
			try:
				p = subprocess.Popen(cmd , shell=True)
				print s
			except:
				logging.error("Did not stop the containers stopping all running containers!!")
	except:
		cmd="docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q)"
		p = subprocess.Popen(cmd , shell=True)

