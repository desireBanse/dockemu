#!/usr/bin/python
import subprocess, logging
import sys, os, time
import traceback
import pymongo, json, statistics

ROOT=os.path.dirname(os.path.abspath(__file__))

#print ROOT
#MONGO
mongo_server='192.168.8.10'
mongo_port=27017 
dbname="dbTest150210-1200"
correlation="correlation"

#logging options: 
main_log=ROOT+"/log/dockemu.log"

#defaults:
bots=2
ftpservers=1
imagegg="dockemu/ftp:staticip"    #get image for good guys with ftp server and static ip
imagebot="dockemu/botnet"         #get image for botnet guys
server="172.17.5.100"
duration=20
delay=0

try:
    os.remove(main_log)
except OSError:
    pass
logging.basicConfig(filename=main_log,level=logging.DEBUG,  format='%(asctime)s %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p')

#clear screen
os.system(['clear','cls'][os.name =='nt'])

#intro banner
print "##############################################"
print "##############################################"
print "______ _____ _____  _   __ ________  ____   _ "
print "|  _  \  _  /  __ \| | / /|  ___|  \/  | | | |"
print "| | | | | | | /  \/| |/ / | |__ | .  . | | | |"
print "| | | | | | | |    |    \ |  __|| |\/| | | | |"
print "| |/ /\ \_/ / \__/\| |\  \| |___| |  | | |_| |"
print "|___/  \___/ \____/\_| \_/\____/\_|  |_/\___/ "
print ""
print "##############################################"
print "#########  WELCOME TO DOCKEMU V.2.0  #########"
print "###  BRUTE FORCE ATTACK TO MESH NEWTORKS #####"
print "##############################################"
print ""
print ""


try:
	dbname = input('Enter the mongo DB name: [defaults=%s]: '%dbname)
	print
except KeyboardInterrupt:
	sys.exit(0)
except:
	print " mongo DB name not provided, using defaults (%s)"%dbname
	print

try:
	ftpservers = input('How many ftpservers do you need? [defaults=%s]: '%ftpservers)
	print
except KeyboardInterrupt:
	sys.exit(0)
except:
	print " ftpservers not provided, using defaults (%s)"%ftpservers
	print

try:
	bots = input('How many bots do you need? [defaults=%s]: '%bots)
	print
except KeyboardInterrupt:
	sys.exit(0)
except:
	print " bots not provided, using defaults (%s)"%bots
	print

#duration of the experiment
try:
	duration = input('Enter the duration of the attack [defaults=%s s], -1=forever:  '%duration)
	print
except KeyboardInterrupt:
	sys.exit(0)
except:
	print "duration not provided, using defaults (%s)"%duration
	print 
print "STARTING DOCKEMU BOT-NET ...."


def start_ibf():
	print "start IBF server"
	cmd = "/usr/bin/java -cp frameworkssh.jar:commons-io-2.4.jar:mongo-java-driver-2.12.2.jar com.galileo.phd.securityframework.ssh.core.Main -logFilePath /var/log/auth.log -mongoServer monserver.galileo.edu -database %s"%dbname
	#p = subprocess.Popen(cmd , shell=True,cwd="/home/chepeftw")

names=[]

ftpserver_list=[]
ftpserver_ips=""
def start_ftpservers():
	#by the moment just support 253 ftpservers
	if ftpservers > 253:
		print "ftpservers can not be > 253"
		sys.exit(0)

	#Starting servers
	for i in range(ftpservers):
		
		cmd="docker run -e 'ipaddress=172.17.%s.5' -d -v %s/log/:/var/log/dockemu/ --name dockemu-ftpserver-%s --privileged %s &>/dev/null"%(i,ROOT,i,imagegg)
		print cmd
		try:
			print
			try:
				p = subprocess.Popen(cmd , shell=True)
				logging.info("STARTING dockemu-ftpserver-%s with IPAddress 172.17.%s.5"%(i,i))
				ftpserver_list=ftpserver_list+["dockemu-ftpserver-%s"%i]
				ftpserver_ips=ftpserver_ips+"172.17.%s.5 "%i
				time.sleep(1)
			except:
				print traceback.format_exc()
				print "CANNOT START dockemu-ftpserver-%s"%i

		except:
			print traceback.format_exc()
			print "ERROR IN LOG dockemu-ftpserver-%s"%i
	failed=False
	time.sleep(2)



# print ftpserver_list
# print ftpserver_ips
bot_ips=[]
def start_botnet():
	if bots > 253:
		print "bots can not be > 253"
		sys.exit(0)

	for i in range(bots):
		cmd="docker run -d -v %s/log/:/var/log/dockemu/ --name  dockemu-botnet-%s %s  '%s' &>/dev/null"%(ROOT,i,imagebot,ftpserver_ips)
		print cmd
		try:
			print
			try:
				p = subprocess.Popen(cmd , shell=True)
				logging.info("STARTING dockemu-%s"%i)
				time.sleep(1)
			except:
				print "CANNOT START dockemu-%s"%i
			
			output = subprocess.check_output("docker inspect dockemu-botnet-%s"%i, shell=True)
			for IP in output.splitlines():
				if "IPAddress" in IP:
					print IP
					bot_ips=bot_ips+[IP]
					logging.info("dockemu-"+str(i)+IP)
			

		except:
			print traceback.format_exc()
			print "ERROR IN LOG dockemu-%s"%i
		time.sleep(delay)
print bot_ips


def stop_all():
	failed=False
	if duration > 0:
		print
		print "Waiting %ss to stop the attack (all docker botnet)"%duration
		time.sleep(duration)
		
		try:
			for i in range(ftpservers):
				cmd="docker kill dockemu-ftpserver-%s && docker stop dockemu-ftpserver-%s  && docker rm dockemu-ftpserver-%s "%(i,i,i)
				logging.info("ENDING dockemu-ftpserver-%s"%i)
				print cmd
				try:
					p = subprocess.Popen(cmd , shell=True)
					print s
				except:
					failed=True
					print "failed to stop dockemu-ftpserver-%s!!"%i
		except:
			cmd="docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q)"
			p = subprocess.Popen(cmd , shell=True)
		
		try:
			for i in range(bots):
				cmd="docker kill dockemu-%s && docker stop dockemu-%s  && docker rm dockemu-%s "%(i,i,i)
				logging.info("ENDING dockemu-%s"%i)
				print cmd
				try:
					p = subprocess.Popen(cmd , shell=True)
					print s
				except:
					failed=True
					print "failed to stop dockemu-%s!!"%i
		except:
			cmd="docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q)"
			p = subprocess.Popen(cmd , shell=True)




def stats():
	client = pymongo.MongoClient(mongo_server, mongo_port)
	db = client[dbname]
	collection = db[correlation]
	ip = '172.17.1.33'


	#array=[{u'falseMatch': 8}, {u'falseMatch': 4}, {u'falseMatch': 5}, {u'falseMatch': 6}]

	array=[]
	#Finding false matches
	for ip in bot_ips:
		falseMatches = collection.find_one({'sourceIP':ip},{'falseMatch':1,'_id':0})
		array+=[falseMatches]

	count=[]
	for falseMatches in array:
		count+=[falseMatches['falseMatch']]
	print count

	mean=statistics.mean(count)
	median= statistics.median(count)
	stdev=statistics.stdev(count)
	maximum=max(count)
	minimum=min(count)

	print "AVERAGE: "+str(mean)
	print "MEDIAN: "+str(median)
	print "STDEV: "+str(stdev)
	print "MAX: "+str(maximum)
	print "MIN: "+str(minimum)


def main():
	#start_ibf()
	start_ftpservers()
	start_botnet()
	stop_all()

	stats()


if __name__ == "__main__":
    main()
